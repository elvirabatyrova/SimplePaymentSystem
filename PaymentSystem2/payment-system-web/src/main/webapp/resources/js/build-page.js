// Generated by CoffeeScript 1.10.0
(function() {
  var BuildUpdater, ClassesGenerator,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  String.prototype.capitalize = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
  };

  ClassesGenerator = (function() {
    function ClassesGenerator() {}

    ClassesGenerator.prototype.generate = function(prefix) {
      if (prefix == null) {
        prefix = "";
      }
      return {
        passed: prefix + "success",
        failed: prefix + "danger",
        processing: prefix + "warning"
      };
    };

    return ClassesGenerator;

  })();

  BuildUpdater = (function(superClass) {
    var build_classes, build_status_classes, classesGenerator, key, task_status_classes, test_status_classes, value;

    extend(BuildUpdater, superClass);

    classesGenerator = new ClassesGenerator;

    test_status_classes = classesGenerator.generate("panel-");

    test_status_classes.pending = test_status_classes.processing;

    build_status_classes = classesGenerator.generate("btn-");

    build_classes = ((function() {
      var results;
      results = [];
      for (key in build_status_classes) {
        value = build_status_classes[key];
        results.push(value);
      }
      return results;
    })()).join(" ");

    task_status_classes = classesGenerator.generate();

    function BuildUpdater(data1) {
      this.data = data1;
      this.update = bind(this.update, this);
      this.renderedTests = 0;
      this.renderedLines = {};
      this.buildStatus = $("#build-status");
      this.buildDuration = $("#build-duration");
      this.tests = $("#tests");
      this.tasks = $("#tasks");
      this.logs = $("#logs");
      BuildUpdater.__super__.constructor.call(this, 2000);
    }

    BuildUpdater.prototype.update = function() {
      this.updateStatus();
      this.updateDuration();
      this.updateTests();
      return this.updateTasks();
    };

    BuildUpdater.prototype.updateStatus = function() {
      return this.buildStatus.removeClass(build_classes).addClass(build_status_classes[this.data.build.status]).text(this.data.build.status.capitalize());
    };

    BuildUpdater.prototype.updateDuration = function() {
      return this.buildDuration.text(this.data.build.duration);
    };

    BuildUpdater.prototype.updateTests = function() {
      var i, j, ref, ref1, test;
      if (this.renderedTests === this.data.build.tests.length) {
        return;
      }
      for (i = j = ref = this.renderedTests, ref1 = this.data.build.tests.length - 1; ref <= ref1 ? j <= ref1 : j >= ref1; i = ref <= ref1 ? ++j : --j) {
        test = this.data.build.tests[i];
        this.tests.append("<div class='test panel " + test_status_classes[test.status] + "' data-test='" + test.name + "'> <div class='panel-heading' role='tab' id='heading" + i + "'> <h4 class='panel-title'> <a role='button' data-toggle='collapse' data-parent='#tests' href='#collapse" + i + "' aria-expanded='true' aria-controls='collapse" + i + "'>" + test.name + "</a> </h4> </div> <div id='collapse" + i + "' class='panel-collapse collapse' role='tabpanel' aria-labelledby='heading" + i + "'> <div class='panel-body'>" + test.message + "</div> </div> </div>");
      }
      return this.renderedTests = this.data.build.tests.length;
    };

    BuildUpdater.prototype.updateTasks = function() {
      var base, i, j, k, len, lines, logsText, modal, modalId, name, ref, ref1, ref2, task, tr;
      this.tasks.empty();
      ref = this.data.build.tasks;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        task = ref[i];
        tr = $("<tr class='" + task_status_classes[task.status] + "'> <td>" + (i + 1) + "</td> <td><a href='#'>" + task.name + "</a></td> <td>" + task.duration + "</td> <td>" + task.status + "</td> <td class='log-links'> <a href='#'>Download</a> </td> </tr>");
        this.tasks.append(tr);
        if (!task.logs.viewable) {
          continue;
        }
        tr.find(".log-links").append($("<a href='#' data-toggle='modal' data-target='#logsModal" + i + "'>View</a>"));
        modalId = "logsModal" + i;
        modal = $("#" + modalId);
        if (!modal.length) {
          modal = $("<div class='modal' id='" + modalId + "'> <div class='modal-dialog modal-lg'> <div class='modal-content'> <div class='modal-header'> <button type='button' class='close' data-dismiss='modal' aria-hidden='true'>&times;</button> <h4 class='modal-title'>" + task.name + "</h4> </div> <div class='modal-body'> <p class='logs-text'></p> </div> <div class='modal-footer'> <button type='button'' class='btn btn-danger' data-dismiss='modal'>Close</button> </div> </div> </div> </div>");
          this.logs.append(modal);
        }
        logsText = modal.find(".logs-text");
        (base = this.renderedLines)[name = task.name] || (base[name] = 0);
        lines = task.logs.lines;
        if (this.renderedLines[task.name] === lines.length) {
          return;
        }
        for (i = k = ref1 = this.renderedLines[task.name], ref2 = lines.length - 1; ref1 <= ref2 ? k <= ref2 : k >= ref2; i = ref1 <= ref2 ? ++k : --k) {
          logsText.append("<div class='text-" + lines[i]["class"] + "'>" + lines[i].text + "</div>");
        }
        this.renderedLines[task.name] = lines.length;
      }
    };

    return BuildUpdater;

  })(window.Updater);

  $(function() {
    var data, failBuild;
    data = {
      build: {
        status: "processing",
        duration: "4:20",
        tests: [
          {
            name: "test1",
            status: "passed",
            message: "Completed in 32ms"
          }, {
            name: "test2",
            status: "pending",
            message: ""
          }
        ],
        tasks: [
          {
            name: "Task1",
            duration: "2:55",
            status: "passed",
            logs: {
              viewable: false
            }
          }, {
            name: "Task2",
            duration: "1:35",
            status: "processing",
            logs: {
              viewable: true,
              lines: [
                {
                  text: "Success Line",
                  "class": "success"
                }, {
                  text: "Warning Line",
                  "class": "warning"
                }, {
                  text: "Info Line",
                  "class": "info"
                }
              ]
            }
          }
        ]
      }
    };
    new BuildUpdater(data);
    failBuild = function() {
      data.build.tests.push({
        name: "test3",
        status: "failed",
        message: "Assertion Error: 2 != 3"
      });
      data.build.tasks[1].status = data.build.status = "failed";
      return data.build.tasks[1].logs.lines.push({
        text: "Danger Line",
        "class": "danger"
      });
    };
    return setTimeout(failBuild, 4000);
  });

}).call(this);
